/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated;


import com.cycastic.library_management.generated.tables.Authors;
import com.cycastic.library_management.generated.tables.BatchDetails;
import com.cycastic.library_management.generated.tables.BookAuthors;
import com.cycastic.library_management.generated.tables.BookLocations;
import com.cycastic.library_management.generated.tables.Books;
import com.cycastic.library_management.generated.tables.BorrowedBooks;
import com.cycastic.library_management.generated.tables.Employees;
import com.cycastic.library_management.generated.tables.Members;
import com.cycastic.library_management.generated.tables.Publisher;
import com.cycastic.library_management.generated.tables.PurchaseBatches;
import com.cycastic.library_management.generated.tables.Shelves;
import com.cycastic.library_management.generated.tables.records.AuthorsRecord;
import com.cycastic.library_management.generated.tables.records.BatchDetailsRecord;
import com.cycastic.library_management.generated.tables.records.BookAuthorsRecord;
import com.cycastic.library_management.generated.tables.records.BookLocationsRecord;
import com.cycastic.library_management.generated.tables.records.BooksRecord;
import com.cycastic.library_management.generated.tables.records.BorrowedBooksRecord;
import com.cycastic.library_management.generated.tables.records.EmployeesRecord;
import com.cycastic.library_management.generated.tables.records.MembersRecord;
import com.cycastic.library_management.generated.tables.records.PublisherRecord;
import com.cycastic.library_management.generated.tables.records.PurchaseBatchesRecord;
import com.cycastic.library_management.generated.tables.records.ShelvesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * library_management.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorsRecord> KEY_AUTHORS_ID = Internal.createUniqueKey(Authors.AUTHORS, DSL.name("KEY_authors_id"), new TableField[] { Authors.AUTHORS.ID }, true);
    public static final UniqueKey<AuthorsRecord> KEY_AUTHORS_PRIMARY = Internal.createUniqueKey(Authors.AUTHORS, DSL.name("KEY_authors_PRIMARY"), new TableField[] { Authors.AUTHORS.ID }, true);
    public static final UniqueKey<BatchDetailsRecord> KEY_BATCH_DETAILS_PRIMARY = Internal.createUniqueKey(BatchDetails.BATCH_DETAILS, DSL.name("KEY_batch_details_PRIMARY"), new TableField[] { BatchDetails.BATCH_DETAILS.BOOK_ID, BatchDetails.BATCH_DETAILS.BATCH_ID }, true);
    public static final UniqueKey<BookAuthorsRecord> KEY_BOOK_AUTHORS_PRIMARY = Internal.createUniqueKey(BookAuthors.BOOK_AUTHORS, DSL.name("KEY_book_authors_PRIMARY"), new TableField[] { BookAuthors.BOOK_AUTHORS.BOOK_ID, BookAuthors.BOOK_AUTHORS.AUTHOR_ID }, true);
    public static final UniqueKey<BookLocationsRecord> KEY_BOOK_LOCATIONS_ID = Internal.createUniqueKey(BookLocations.BOOK_LOCATIONS, DSL.name("KEY_book_locations_id"), new TableField[] { BookLocations.BOOK_LOCATIONS.ID }, true);
    public static final UniqueKey<BookLocationsRecord> KEY_BOOK_LOCATIONS_PRIMARY = Internal.createUniqueKey(BookLocations.BOOK_LOCATIONS, DSL.name("KEY_book_locations_PRIMARY"), new TableField[] { BookLocations.BOOK_LOCATIONS.ID }, true);
    public static final UniqueKey<BooksRecord> KEY_BOOKS_ID = Internal.createUniqueKey(Books.BOOKS, DSL.name("KEY_books_id"), new TableField[] { Books.BOOKS.ID }, true);
    public static final UniqueKey<BooksRecord> KEY_BOOKS_PRIMARY = Internal.createUniqueKey(Books.BOOKS, DSL.name("KEY_books_PRIMARY"), new TableField[] { Books.BOOKS.ID }, true);
    public static final UniqueKey<BorrowedBooksRecord> KEY_BORROWED_BOOKS_PRIMARY = Internal.createUniqueKey(BorrowedBooks.BORROWED_BOOKS, DSL.name("KEY_borrowed_books_PRIMARY"), new TableField[] { BorrowedBooks.BORROWED_BOOKS.TICKET_ID }, true);
    public static final UniqueKey<BorrowedBooksRecord> KEY_BORROWED_BOOKS_TICKET_ID = Internal.createUniqueKey(BorrowedBooks.BORROWED_BOOKS, DSL.name("KEY_borrowed_books_ticket_id"), new TableField[] { BorrowedBooks.BORROWED_BOOKS.TICKET_ID }, true);
    public static final UniqueKey<EmployeesRecord> KEY_EMPLOYEES_PRIMARY = Internal.createUniqueKey(Employees.EMPLOYEES, DSL.name("KEY_employees_PRIMARY"), new TableField[] { Employees.EMPLOYEES.ID }, true);
    public static final UniqueKey<MembersRecord> KEY_MEMBERS_PRIMARY = Internal.createUniqueKey(Members.MEMBERS, DSL.name("KEY_members_PRIMARY"), new TableField[] { Members.MEMBERS.ID }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_ID = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_id"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_PRIMARY = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_PRIMARY"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<PurchaseBatchesRecord> KEY_PURCHASE_BATCHES_ID = Internal.createUniqueKey(PurchaseBatches.PURCHASE_BATCHES, DSL.name("KEY_purchase_batches_id"), new TableField[] { PurchaseBatches.PURCHASE_BATCHES.ID }, true);
    public static final UniqueKey<PurchaseBatchesRecord> KEY_PURCHASE_BATCHES_PRIMARY = Internal.createUniqueKey(PurchaseBatches.PURCHASE_BATCHES, DSL.name("KEY_purchase_batches_PRIMARY"), new TableField[] { PurchaseBatches.PURCHASE_BATCHES.ID }, true);
    public static final UniqueKey<ShelvesRecord> KEY_SHELVES_PRIMARY = Internal.createUniqueKey(Shelves.SHELVES, DSL.name("KEY_shelves_PRIMARY"), new TableField[] { Shelves.SHELVES.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BatchDetailsRecord, BooksRecord> BATCH_DETAILS_BOOKS_ID_FK = Internal.createForeignKey(BatchDetails.BATCH_DETAILS, DSL.name("batch_details_books_id_fk"), new TableField[] { BatchDetails.BATCH_DETAILS.BOOK_ID }, Keys.KEY_BOOKS_PRIMARY, new TableField[] { Books.BOOKS.ID }, true);
    public static final ForeignKey<BatchDetailsRecord, PurchaseBatchesRecord> BATCH_DETAILS_PURCHASE_BATCHES_ID_FK = Internal.createForeignKey(BatchDetails.BATCH_DETAILS, DSL.name("batch_details_purchase_batches_id_fk"), new TableField[] { BatchDetails.BATCH_DETAILS.BATCH_ID }, Keys.KEY_PURCHASE_BATCHES_PRIMARY, new TableField[] { PurchaseBatches.PURCHASE_BATCHES.ID }, true);
    public static final ForeignKey<BookAuthorsRecord, AuthorsRecord> BOOK_AUTHORS_AUTHORS_ID_FK = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_authors_id_fk"), new TableField[] { BookAuthors.BOOK_AUTHORS.AUTHOR_ID }, Keys.KEY_AUTHORS_PRIMARY, new TableField[] { Authors.AUTHORS.ID }, true);
    public static final ForeignKey<BookAuthorsRecord, BooksRecord> BOOK_AUTHORS_BOOKS_ID_FK = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_books_id_fk"), new TableField[] { BookAuthors.BOOK_AUTHORS.BOOK_ID }, Keys.KEY_BOOKS_PRIMARY, new TableField[] { Books.BOOKS.ID }, true);
    public static final ForeignKey<BookLocationsRecord, BooksRecord> BOOK_LOCATIONS_BOOKS_ID_FK = Internal.createForeignKey(BookLocations.BOOK_LOCATIONS, DSL.name("book_locations_books_id_fk"), new TableField[] { BookLocations.BOOK_LOCATIONS.BOOK_ID }, Keys.KEY_BOOKS_PRIMARY, new TableField[] { Books.BOOKS.ID }, true);
    public static final ForeignKey<BookLocationsRecord, ShelvesRecord> BOOK_LOCATIONS_SHELVES_ID_FK = Internal.createForeignKey(BookLocations.BOOK_LOCATIONS, DSL.name("book_locations_shelves_id_fk"), new TableField[] { BookLocations.BOOK_LOCATIONS.SHELF_ID }, Keys.KEY_SHELVES_PRIMARY, new TableField[] { Shelves.SHELVES.ID }, true);
    public static final ForeignKey<BorrowedBooksRecord, BooksRecord> BORROWED_BOOKS_BOOKS_ID_FK = Internal.createForeignKey(BorrowedBooks.BORROWED_BOOKS, DSL.name("borrowed_books_books_id_fk"), new TableField[] { BorrowedBooks.BORROWED_BOOKS.BOOK_ID }, Keys.KEY_BOOKS_PRIMARY, new TableField[] { Books.BOOKS.ID }, true);
    public static final ForeignKey<BorrowedBooksRecord, EmployeesRecord> BORROWED_BOOKS_EMPLOYEES_ID_FK = Internal.createForeignKey(BorrowedBooks.BORROWED_BOOKS, DSL.name("borrowed_books_employees_id_fk"), new TableField[] { BorrowedBooks.BORROWED_BOOKS.APPROVED_BY }, Keys.KEY_EMPLOYEES_PRIMARY, new TableField[] { Employees.EMPLOYEES.ID }, true);
    public static final ForeignKey<BorrowedBooksRecord, MembersRecord> BORROWED_BOOKS_MEMBERS_ID_FK = Internal.createForeignKey(BorrowedBooks.BORROWED_BOOKS, DSL.name("borrowed_books_members_id_fk"), new TableField[] { BorrowedBooks.BORROWED_BOOKS.MEMBER_ID }, Keys.KEY_MEMBERS_PRIMARY, new TableField[] { Members.MEMBERS.ID }, true);
    public static final ForeignKey<PurchaseBatchesRecord, EmployeesRecord> PURCHASE_BATCHES_EMPLOYEES_ID_FK = Internal.createForeignKey(PurchaseBatches.PURCHASE_BATCHES, DSL.name("purchase_batches_employees_id_fk"), new TableField[] { PurchaseBatches.PURCHASE_BATCHES.APPROVED_BY }, Keys.KEY_EMPLOYEES_PRIMARY, new TableField[] { Employees.EMPLOYEES.ID }, true);
    public static final ForeignKey<PurchaseBatchesRecord, PublisherRecord> PURCHASE_BATCHES_PUBLISHER_ID_FK = Internal.createForeignKey(PurchaseBatches.PURCHASE_BATCHES, DSL.name("purchase_batches_publisher_id_fk"), new TableField[] { PurchaseBatches.PURCHASE_BATCHES.FROM_PUBLISHER }, Keys.KEY_PUBLISHER_PRIMARY, new TableField[] { Publisher.PUBLISHER.ID }, true);
}
