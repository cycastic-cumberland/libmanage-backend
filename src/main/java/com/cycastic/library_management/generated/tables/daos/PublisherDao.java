/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables.daos;


import com.cycastic.library_management.generated.tables.Publisher;
import com.cycastic.library_management.generated.tables.records.PublisherRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublisherDao extends DAOImpl<PublisherRecord, com.cycastic.library_management.generated.tables.pojos.Publisher, ULong> {

    /**
     * Create a new PublisherDao without any configuration
     */
    public PublisherDao() {
        super(Publisher.PUBLISHER, com.cycastic.library_management.generated.tables.pojos.Publisher.class);
    }

    /**
     * Create a new PublisherDao with an attached configuration
     */
    public PublisherDao(Configuration configuration) {
        super(Publisher.PUBLISHER, com.cycastic.library_management.generated.tables.pojos.Publisher.class, configuration);
    }

    @Override
    public ULong getId(com.cycastic.library_management.generated.tables.pojos.Publisher object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchRangeOfId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Publisher.PUBLISHER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchById(ULong... values) {
        return fetch(Publisher.PUBLISHER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.cycastic.library_management.generated.tables.pojos.Publisher fetchOneById(ULong value) {
        return fetchOne(Publisher.PUBLISHER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchOptionalById(ULong value) {
        return fetchOptional(Publisher.PUBLISHER.ID, value);
    }

    /**
     * Fetch records that have <code>publisher_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchRangeOfPublisherName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Publisher.PUBLISHER.PUBLISHER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>publisher_name IN (values)</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchByPublisherName(String... values) {
        return fetch(Publisher.PUBLISHER.PUBLISHER_NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Publisher.PUBLISHER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.Publisher> fetchByEmail(String... values) {
        return fetch(Publisher.PUBLISHER.EMAIL, values);
    }
}
