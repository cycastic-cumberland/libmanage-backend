/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Indexes;
import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.AuthorsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_management.authors</code>
     */
    public static final Authors AUTHORS = new Authors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsRecord> getRecordType() {
        return AuthorsRecord.class;
    }

    /**
     * The column <code>library_management.authors.id</code>.
     */
    public final TableField<AuthorsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>library_management.authors.name</code>.
     */
    public final TableField<AuthorsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Authors(Name alias, Table<AuthorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authors(Name alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.authors</code> table reference
     */
    public Authors(String alias) {
        this(DSL.name(alias), AUTHORS);
    }

    /**
     * Create an aliased <code>library_management.authors</code> table reference
     */
    public Authors(Name alias) {
        this(alias, AUTHORS);
    }

    /**
     * Create a <code>library_management.authors</code> table reference
     */
    public Authors() {
        this(DSL.name("authors"), null);
    }

    public <O extends Record> Authors(Table<O> child, ForeignKey<O, AuthorsRecord> key) {
        super(child, key, AUTHORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AUTHORS_AUTHORS_NAME_INDEX);
    }

    @Override
    public Identity<AuthorsRecord, ULong> getIdentity() {
        return (Identity<AuthorsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuthorsRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuthorsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_AUTHORS_ID);
    }

    @Override
    public Authors as(String alias) {
        return new Authors(DSL.name(alias), this);
    }

    @Override
    public Authors as(Name alias) {
        return new Authors(alias, this);
    }

    @Override
    public Authors as(Table<?> alias) {
        return new Authors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(String name) {
        return new Authors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(Name name) {
        return new Authors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authors rename(Table<?> name) {
        return new Authors(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super ULong, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super ULong, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
