/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.BookLocationsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookLocations extends TableImpl<BookLocationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_management.book_locations</code>
     */
    public static final BookLocations BOOK_LOCATIONS = new BookLocations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookLocationsRecord> getRecordType() {
        return BookLocationsRecord.class;
    }

    /**
     * The column <code>library_management.book_locations.id</code>.
     */
    public final TableField<BookLocationsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>library_management.book_locations.book_id</code>.
     */
    public final TableField<BookLocationsRecord, ULong> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>library_management.book_locations.shelf_id</code>.
     */
    public final TableField<BookLocationsRecord, String> SHELF_ID = createField(DSL.name("shelf_id"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    private BookLocations(Name alias, Table<BookLocationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookLocations(Name alias, Table<BookLocationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.book_locations</code> table
     * reference
     */
    public BookLocations(String alias) {
        this(DSL.name(alias), BOOK_LOCATIONS);
    }

    /**
     * Create an aliased <code>library_management.book_locations</code> table
     * reference
     */
    public BookLocations(Name alias) {
        this(alias, BOOK_LOCATIONS);
    }

    /**
     * Create a <code>library_management.book_locations</code> table reference
     */
    public BookLocations() {
        this(DSL.name("book_locations"), null);
    }

    public <O extends Record> BookLocations(Table<O> child, ForeignKey<O, BookLocationsRecord> key) {
        super(child, key, BOOK_LOCATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public Identity<BookLocationsRecord, ULong> getIdentity() {
        return (Identity<BookLocationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookLocationsRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_LOCATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookLocationsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BOOK_LOCATIONS_ID);
    }

    @Override
    public List<ForeignKey<BookLocationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOK_LOCATIONS_BOOKS_ID_FK, Keys.BOOK_LOCATIONS_SHELVES_ID_FK);
    }

    private transient Books _books;
    private transient Shelves _shelves;

    /**
     * Get the implicit join path to the <code>library_management.books</code>
     * table.
     */
    public Books books() {
        if (_books == null)
            _books = new Books(this, Keys.BOOK_LOCATIONS_BOOKS_ID_FK);

        return _books;
    }

    /**
     * Get the implicit join path to the <code>library_management.shelves</code>
     * table.
     */
    public Shelves shelves() {
        if (_shelves == null)
            _shelves = new Shelves(this, Keys.BOOK_LOCATIONS_SHELVES_ID_FK);

        return _shelves;
    }

    @Override
    public BookLocations as(String alias) {
        return new BookLocations(DSL.name(alias), this);
    }

    @Override
    public BookLocations as(Name alias) {
        return new BookLocations(alias, this);
    }

    @Override
    public BookLocations as(Table<?> alias) {
        return new BookLocations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookLocations rename(String name) {
        return new BookLocations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookLocations rename(Name name) {
        return new BookLocations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookLocations rename(Table<?> name) {
        return new BookLocations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
