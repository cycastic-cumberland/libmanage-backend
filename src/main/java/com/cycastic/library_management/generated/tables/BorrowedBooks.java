/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.BorrowedBooksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BorrowedBooks extends TableImpl<BorrowedBooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_management.borrowed_books</code>
     */
    public static final BorrowedBooks BORROWED_BOOKS = new BorrowedBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BorrowedBooksRecord> getRecordType() {
        return BorrowedBooksRecord.class;
    }

    /**
     * The column <code>library_management.borrowed_books.ticket_id</code>.
     */
    public final TableField<BorrowedBooksRecord, ULong> TICKET_ID = createField(DSL.name("ticket_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>library_management.borrowed_books.member_id</code>.
     */
    public final TableField<BorrowedBooksRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>library_management.borrowed_books.book_id</code>.
     */
    public final TableField<BorrowedBooksRecord, ULong> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>library_management.borrowed_books.borrowed_at</code>.
     */
    public final TableField<BorrowedBooksRecord, LocalDateTime> BORROWED_AT = createField(DSL.name("borrowed_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>library_management.borrowed_books.approved_by</code>.
     */
    public final TableField<BorrowedBooksRecord, String> APPROVED_BY = createField(DSL.name("approved_by"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>library_management.borrowed_books.returned</code>.
     */
    public final TableField<BorrowedBooksRecord, Byte> RETURNED = createField(DSL.name("returned"), SQLDataType.TINYINT.nullable(false), this, "");

    private BorrowedBooks(Name alias, Table<BorrowedBooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private BorrowedBooks(Name alias, Table<BorrowedBooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.borrowed_books</code> table
     * reference
     */
    public BorrowedBooks(String alias) {
        this(DSL.name(alias), BORROWED_BOOKS);
    }

    /**
     * Create an aliased <code>library_management.borrowed_books</code> table
     * reference
     */
    public BorrowedBooks(Name alias) {
        this(alias, BORROWED_BOOKS);
    }

    /**
     * Create a <code>library_management.borrowed_books</code> table reference
     */
    public BorrowedBooks() {
        this(DSL.name("borrowed_books"), null);
    }

    public <O extends Record> BorrowedBooks(Table<O> child, ForeignKey<O, BorrowedBooksRecord> key) {
        super(child, key, BORROWED_BOOKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public Identity<BorrowedBooksRecord, ULong> getIdentity() {
        return (Identity<BorrowedBooksRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BorrowedBooksRecord> getPrimaryKey() {
        return Keys.KEY_BORROWED_BOOKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BorrowedBooksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BORROWED_BOOKS_TICKET_ID);
    }

    @Override
    public List<ForeignKey<BorrowedBooksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BORROWED_BOOKS_MEMBERS_ID_FK, Keys.BORROWED_BOOKS_BOOKS_ID_FK, Keys.BORROWED_BOOKS_EMPLOYEES_ID_FK);
    }

    private transient Members _members;
    private transient Books _books;
    private transient Employees _employees;

    /**
     * Get the implicit join path to the <code>library_management.members</code>
     * table.
     */
    public Members members() {
        if (_members == null)
            _members = new Members(this, Keys.BORROWED_BOOKS_MEMBERS_ID_FK);

        return _members;
    }

    /**
     * Get the implicit join path to the <code>library_management.books</code>
     * table.
     */
    public Books books() {
        if (_books == null)
            _books = new Books(this, Keys.BORROWED_BOOKS_BOOKS_ID_FK);

        return _books;
    }

    /**
     * Get the implicit join path to the
     * <code>library_management.employees</code> table.
     */
    public Employees employees() {
        if (_employees == null)
            _employees = new Employees(this, Keys.BORROWED_BOOKS_EMPLOYEES_ID_FK);

        return _employees;
    }

    @Override
    public BorrowedBooks as(String alias) {
        return new BorrowedBooks(DSL.name(alias), this);
    }

    @Override
    public BorrowedBooks as(Name alias) {
        return new BorrowedBooks(alias, this);
    }

    @Override
    public BorrowedBooks as(Table<?> alias) {
        return new BorrowedBooks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BorrowedBooks rename(String name) {
        return new BorrowedBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BorrowedBooks rename(Name name) {
        return new BorrowedBooks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BorrowedBooks rename(Table<?> name) {
        return new BorrowedBooks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, ULong, LocalDateTime, String, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super ULong, ? super String, ? super ULong, ? super LocalDateTime, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super ULong, ? super String, ? super ULong, ? super LocalDateTime, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
