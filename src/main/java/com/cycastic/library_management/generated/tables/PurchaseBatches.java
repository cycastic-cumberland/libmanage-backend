/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.PurchaseBatchesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseBatches extends TableImpl<PurchaseBatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>library_management.purchase_batches</code>
     */
    public static final PurchaseBatches PURCHASE_BATCHES = new PurchaseBatches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseBatchesRecord> getRecordType() {
        return PurchaseBatchesRecord.class;
    }

    /**
     * The column <code>library_management.purchase_batches.id</code>.
     */
    public final TableField<PurchaseBatchesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>library_management.purchase_batches.purchase_date</code>.
     */
    public final TableField<PurchaseBatchesRecord, LocalDateTime> PURCHASE_DATE = createField(DSL.name("purchase_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column
     * <code>library_management.purchase_batches.from_publisher</code>.
     */
    public final TableField<PurchaseBatchesRecord, ULong> FROM_PUBLISHER = createField(DSL.name("from_publisher"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>library_management.purchase_batches.cost</code>.
     */
    public final TableField<PurchaseBatchesRecord, Long> COST = createField(DSL.name("cost"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>library_management.purchase_batches.approved_by</code>.
     */
    public final TableField<PurchaseBatchesRecord, String> APPROVED_BY = createField(DSL.name("approved_by"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private PurchaseBatches(Name alias, Table<PurchaseBatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchaseBatches(Name alias, Table<PurchaseBatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.purchase_batches</code> table
     * reference
     */
    public PurchaseBatches(String alias) {
        this(DSL.name(alias), PURCHASE_BATCHES);
    }

    /**
     * Create an aliased <code>library_management.purchase_batches</code> table
     * reference
     */
    public PurchaseBatches(Name alias) {
        this(alias, PURCHASE_BATCHES);
    }

    /**
     * Create a <code>library_management.purchase_batches</code> table reference
     */
    public PurchaseBatches() {
        this(DSL.name("purchase_batches"), null);
    }

    public <O extends Record> PurchaseBatches(Table<O> child, ForeignKey<O, PurchaseBatchesRecord> key) {
        super(child, key, PURCHASE_BATCHES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public Identity<PurchaseBatchesRecord, ULong> getIdentity() {
        return (Identity<PurchaseBatchesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchaseBatchesRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_BATCHES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseBatchesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PURCHASE_BATCHES_ID);
    }

    @Override
    public List<ForeignKey<PurchaseBatchesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PURCHASE_BATCHES_PUBLISHER_ID_FK, Keys.PURCHASE_BATCHES_EMPLOYEES_ID_FK);
    }

    private transient Publisher _publisher;
    private transient Employees _employees;

    /**
     * Get the implicit join path to the
     * <code>library_management.publisher</code> table.
     */
    public Publisher publisher() {
        if (_publisher == null)
            _publisher = new Publisher(this, Keys.PURCHASE_BATCHES_PUBLISHER_ID_FK);

        return _publisher;
    }

    /**
     * Get the implicit join path to the
     * <code>library_management.employees</code> table.
     */
    public Employees employees() {
        if (_employees == null)
            _employees = new Employees(this, Keys.PURCHASE_BATCHES_EMPLOYEES_ID_FK);

        return _employees;
    }

    @Override
    public PurchaseBatches as(String alias) {
        return new PurchaseBatches(DSL.name(alias), this);
    }

    @Override
    public PurchaseBatches as(Name alias) {
        return new PurchaseBatches(alias, this);
    }

    @Override
    public PurchaseBatches as(Table<?> alias) {
        return new PurchaseBatches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseBatches rename(String name) {
        return new PurchaseBatches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseBatches rename(Name name) {
        return new PurchaseBatches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseBatches rename(Table<?> name) {
        return new PurchaseBatches(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, LocalDateTime, ULong, Long, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super ULong, ? super LocalDateTime, ? super ULong, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super ULong, ? super LocalDateTime, ? super ULong, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
