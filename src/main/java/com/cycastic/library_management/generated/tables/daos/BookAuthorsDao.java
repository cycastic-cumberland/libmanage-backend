/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables.daos;


import com.cycastic.library_management.generated.tables.BookAuthors;
import com.cycastic.library_management.generated.tables.records.BookAuthorsRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthorsDao extends DAOImpl<BookAuthorsRecord, com.cycastic.library_management.generated.tables.pojos.BookAuthors, Record2<ULong, ULong>> {

    /**
     * Create a new BookAuthorsDao without any configuration
     */
    public BookAuthorsDao() {
        super(BookAuthors.BOOK_AUTHORS, com.cycastic.library_management.generated.tables.pojos.BookAuthors.class);
    }

    /**
     * Create a new BookAuthorsDao with an attached configuration
     */
    public BookAuthorsDao(Configuration configuration) {
        super(BookAuthors.BOOK_AUTHORS, com.cycastic.library_management.generated.tables.pojos.BookAuthors.class, configuration);
    }

    @Override
    public Record2<ULong, ULong> getId(com.cycastic.library_management.generated.tables.pojos.BookAuthors object) {
        return compositeKeyRecord(object.getBookId(), object.getAuthorId());
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.BookAuthors> fetchRangeOfBookId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(BookAuthors.BOOK_AUTHORS.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.BookAuthors> fetchByBookId(ULong... values) {
        return fetch(BookAuthors.BOOK_AUTHORS.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.BookAuthors> fetchRangeOfAuthorId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(BookAuthors.BOOK_AUTHORS.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<com.cycastic.library_management.generated.tables.pojos.BookAuthors> fetchByAuthorId(ULong... values) {
        return fetch(BookAuthors.BOOK_AUTHORS.AUTHOR_ID, values);
    }
}
