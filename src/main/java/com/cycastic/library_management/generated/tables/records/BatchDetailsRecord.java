/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables.records;


import com.cycastic.library_management.generated.tables.BatchDetails;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchDetailsRecord extends UpdatableRecordImpl<BatchDetailsRecord> implements Record3<ULong, ULong, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>library_management.batch_details.batch_id</code>.
     */
    public void setBatchId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>library_management.batch_details.batch_id</code>.
     */
    public ULong getBatchId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>library_management.batch_details.book_id</code>.
     */
    public void setBookId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>library_management.batch_details.book_id</code>.
     */
    public ULong getBookId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>library_management.batch_details.amount</code>.
     */
    public void setAmount(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>library_management.batch_details.amount</code>.
     */
    public Integer getAmount() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<ULong, ULong> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<ULong, ULong, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return BatchDetails.BATCH_DETAILS.BATCH_ID;
    }

    @Override
    public Field<ULong> field2() {
        return BatchDetails.BATCH_DETAILS.BOOK_ID;
    }

    @Override
    public Field<Integer> field3() {
        return BatchDetails.BATCH_DETAILS.AMOUNT;
    }

    @Override
    public ULong component1() {
        return getBatchId();
    }

    @Override
    public ULong component2() {
        return getBookId();
    }

    @Override
    public Integer component3() {
        return getAmount();
    }

    @Override
    public ULong value1() {
        return getBatchId();
    }

    @Override
    public ULong value2() {
        return getBookId();
    }

    @Override
    public Integer value3() {
        return getAmount();
    }

    @Override
    public BatchDetailsRecord value1(ULong value) {
        setBatchId(value);
        return this;
    }

    @Override
    public BatchDetailsRecord value2(ULong value) {
        setBookId(value);
        return this;
    }

    @Override
    public BatchDetailsRecord value3(Integer value) {
        setAmount(value);
        return this;
    }

    @Override
    public BatchDetailsRecord values(ULong value1, ULong value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchDetailsRecord
     */
    public BatchDetailsRecord() {
        super(BatchDetails.BATCH_DETAILS);
    }

    /**
     * Create a detached, initialised BatchDetailsRecord
     */
    public BatchDetailsRecord(ULong batchId, ULong bookId, Integer amount) {
        super(BatchDetails.BATCH_DETAILS);

        setBatchId(batchId);
        setBookId(bookId);
        setAmount(amount);
    }

    /**
     * Create a detached, initialised BatchDetailsRecord
     */
    public BatchDetailsRecord(com.cycastic.library_management.generated.tables.pojos.BatchDetails value) {
        super(BatchDetails.BATCH_DETAILS);

        if (value != null) {
            setBatchId(value.getBatchId());
            setBookId(value.getBookId());
            setAmount(value.getAmount());
        }
    }
}
