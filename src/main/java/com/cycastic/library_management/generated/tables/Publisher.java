/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.PublisherRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publisher extends TableImpl<PublisherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_management.publisher</code>
     */
    public static final Publisher PUBLISHER = new Publisher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublisherRecord> getRecordType() {
        return PublisherRecord.class;
    }

    /**
     * The column <code>library_management.publisher.id</code>.
     */
    public final TableField<PublisherRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>library_management.publisher.publisher_name</code>.
     */
    public final TableField<PublisherRecord, String> PUBLISHER_NAME = createField(DSL.name("publisher_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>library_management.publisher.email</code>.
     */
    public final TableField<PublisherRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private Publisher(Name alias, Table<PublisherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publisher(Name alias, Table<PublisherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.publisher</code> table
     * reference
     */
    public Publisher(String alias) {
        this(DSL.name(alias), PUBLISHER);
    }

    /**
     * Create an aliased <code>library_management.publisher</code> table
     * reference
     */
    public Publisher(Name alias) {
        this(alias, PUBLISHER);
    }

    /**
     * Create a <code>library_management.publisher</code> table reference
     */
    public Publisher() {
        this(DSL.name("publisher"), null);
    }

    public <O extends Record> Publisher(Table<O> child, ForeignKey<O, PublisherRecord> key) {
        super(child, key, PUBLISHER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public Identity<PublisherRecord, ULong> getIdentity() {
        return (Identity<PublisherRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<PublisherRecord> getPrimaryKey() {
        return Keys.KEY_PUBLISHER_PRIMARY;
    }

    @Override
    public List<UniqueKey<PublisherRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PUBLISHER_ID);
    }

    @Override
    public Publisher as(String alias) {
        return new Publisher(DSL.name(alias), this);
    }

    @Override
    public Publisher as(Name alias) {
        return new Publisher(alias, this);
    }

    @Override
    public Publisher as(Table<?> alias) {
        return new Publisher(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(String name) {
        return new Publisher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(Name name) {
        return new Publisher(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(Table<?> name) {
        return new Publisher(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
