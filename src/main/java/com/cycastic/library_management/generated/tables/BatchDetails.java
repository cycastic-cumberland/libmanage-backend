/*
 * This file is generated by jOOQ.
 */
package com.cycastic.library_management.generated.tables;


import com.cycastic.library_management.generated.Keys;
import com.cycastic.library_management.generated.LibraryManagement;
import com.cycastic.library_management.generated.tables.records.BatchDetailsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchDetails extends TableImpl<BatchDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library_management.batch_details</code>
     */
    public static final BatchDetails BATCH_DETAILS = new BatchDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchDetailsRecord> getRecordType() {
        return BatchDetailsRecord.class;
    }

    /**
     * The column <code>library_management.batch_details.batch_id</code>.
     */
    public final TableField<BatchDetailsRecord, ULong> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>library_management.batch_details.book_id</code>.
     */
    public final TableField<BatchDetailsRecord, ULong> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>library_management.batch_details.amount</code>.
     */
    public final TableField<BatchDetailsRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private BatchDetails(Name alias, Table<BatchDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchDetails(Name alias, Table<BatchDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library_management.batch_details</code> table
     * reference
     */
    public BatchDetails(String alias) {
        this(DSL.name(alias), BATCH_DETAILS);
    }

    /**
     * Create an aliased <code>library_management.batch_details</code> table
     * reference
     */
    public BatchDetails(Name alias) {
        this(alias, BATCH_DETAILS);
    }

    /**
     * Create a <code>library_management.batch_details</code> table reference
     */
    public BatchDetails() {
        this(DSL.name("batch_details"), null);
    }

    public <O extends Record> BatchDetails(Table<O> child, ForeignKey<O, BatchDetailsRecord> key) {
        super(child, key, BATCH_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LibraryManagement.LIBRARY_MANAGEMENT;
    }

    @Override
    public UniqueKey<BatchDetailsRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_DETAILS_PRIMARY;
    }

    @Override
    public List<ForeignKey<BatchDetailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BATCH_DETAILS_PURCHASE_BATCHES_ID_FK, Keys.BATCH_DETAILS_BOOKS_ID_FK);
    }

    private transient PurchaseBatches _purchaseBatches;
    private transient Books _books;

    /**
     * Get the implicit join path to the
     * <code>library_management.purchase_batches</code> table.
     */
    public PurchaseBatches purchaseBatches() {
        if (_purchaseBatches == null)
            _purchaseBatches = new PurchaseBatches(this, Keys.BATCH_DETAILS_PURCHASE_BATCHES_ID_FK);

        return _purchaseBatches;
    }

    /**
     * Get the implicit join path to the <code>library_management.books</code>
     * table.
     */
    public Books books() {
        if (_books == null)
            _books = new Books(this, Keys.BATCH_DETAILS_BOOKS_ID_FK);

        return _books;
    }

    @Override
    public BatchDetails as(String alias) {
        return new BatchDetails(DSL.name(alias), this);
    }

    @Override
    public BatchDetails as(Name alias) {
        return new BatchDetails(alias, this);
    }

    @Override
    public BatchDetails as(Table<?> alias) {
        return new BatchDetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchDetails rename(String name) {
        return new BatchDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchDetails rename(Name name) {
        return new BatchDetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchDetails rename(Table<?> name) {
        return new BatchDetails(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
